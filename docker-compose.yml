version: '3.8'

services:
  # --- BANCO DE DADOS ---
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: payment_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql  # Executa scripts SQL ao iniciar
    ports:
      - "5432:5432"
    networks:
      - payment-network

  # --- KAFKA E ZOOKEEPER ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - payment-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - payment-network

  # --- MICROSSERVIÃ‡OS ---
  payment-gateway:
    build:
      context: ./payment-gateway
      dockerfile: Dockerfile
    container_name: payment-gateway
    depends_on:
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/payment_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8080:8080"
    networks:
      - payment-network

  bank-simulator:
    build:
      context: ./bank-simulator
      dockerfile: Dockerfile
    container_name: bank-simulator
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - payment-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    depends_on:
      - payment-gateway
    ports:
      - "80:8080"
    networks:
      - payment-network

  # --- MONITORAMENTO ---
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - payment-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    networks:
      - payment-network

# --- VOLUMES ---
volumes:
  postgres_data:
  kafka_data:
  grafana_data:

# --- REDE ---
networks:
  payment-network:
    driver: bridge